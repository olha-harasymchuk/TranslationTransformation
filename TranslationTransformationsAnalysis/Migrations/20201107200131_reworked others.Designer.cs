// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TranslationTransformationsAnalysis.Repository;

namespace TranslationTransformationsAnalysis.Migrations
{
    [DbContext(typeof(TransformationUnitContext))]
    [Migration("20201107200131_reworked others")]
    partial class reworkedothers
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TranslationTransformationsAnalysis.Models.ContextType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FonLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LekLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MorfLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SyntLevel")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContextTypes");
                });

            modelBuilder.Entity("TranslationTransformationsAnalysis.Models.FormalType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FonLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LekLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MorfLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SlovLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SyntLevel")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FormalTypes");
                });

            modelBuilder.Entity("TranslationTransformationsAnalysis.Models.PragmalType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AxTransformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FraTtransformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KoncTransformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MegTransformation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PragmalTypes");
                });

            modelBuilder.Entity("TranslationTransformationsAnalysis.Models.TransformationUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Context")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ContextTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Formal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FormalTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Original")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pragmal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PragmalTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Translation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContextTypeId");

                    b.HasIndex("FormalTypeId");

                    b.HasIndex("PragmalTypeId");

                    b.ToTable("TransformationUnits");
                });

            modelBuilder.Entity("TranslationTransformationsAnalysis.Models.TransformationUnit", b =>
                {
                    b.HasOne("TranslationTransformationsAnalysis.Models.ContextType", "ContextType")
                        .WithMany()
                        .HasForeignKey("ContextTypeId");

                    b.HasOne("TranslationTransformationsAnalysis.Models.FormalType", "FormalType")
                        .WithMany()
                        .HasForeignKey("FormalTypeId");

                    b.HasOne("TranslationTransformationsAnalysis.Models.PragmalType", "PragmalType")
                        .WithMany()
                        .HasForeignKey("PragmalTypeId");
                });
#pragma warning restore 612, 618
        }
    }
}
